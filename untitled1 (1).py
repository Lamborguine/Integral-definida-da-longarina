# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZ_qqRF1J18mpsOyZcMs51UNIv3HbkdX
"""

import openpyxl
from scipy.integrate import quad
import re
import numpy as np
import matplotlib.pyplot as plt
from sympy import symbols, sympify

class CalculadoraEsforcoCortante:
    def __init__(self, caminho_planilha):
        # Lendo a planilha
        self.caminho_planilha = caminho_planilha
        self.workbook = openpyxl.load_workbook(self.caminho_planilha)
        self.sheet = self.workbook.active
        self.celula = self.sheet['C4']
        self.valor = self.celula.value
        self.log = []

    def log_to_file(self, filename):
        with open(filename, 'w') as f:
            for line in self.log:
                f.write(str(line) + '\n')

    def processar_equacao(self):
        # Acessando a celula
        self.log.append(self.celula.value)

        # Tornando a equação legivel
        e = self.celula.value
        e = re.sub(r'x(\d)', r'x**\1', e)
        e = e.replace(',', '.')
        e = e.replace('x','*x')
        e, r2 = e.split('R²')
        e = e.replace('y =', '')
        self.log.append(e)
        return e

    def plotar_grafico(self, e):
        # Definindo valor para o grafico
        def f(x):
            return eval(e)
        x = np.linspace(-10, 10, 400)
        y = f(x)
        plt.plot(x, y)
        plt.show()

    def calcular_esforco_cortante(self, e):
        # esforco cortante
        # dividindo a equação em partes
        partes = re.findall(r'[+-]?\s*\d+\.\d+\*x\*\*\d+|[+-]?\s*\d+\.\d+', e)
        partes = partes[::-1]
        resultados = []
        for i, parte in enumerate(partes):
            if i < 7:
                coeficiente_str = re.search(r'[+-]?\s*\d+\.\d+', parte).group()  # Extrai o coeficiente de cada parte
                coeficiente_str = coeficiente_str.replace(" ", "")  # Remove os espaços em branco
                coeficiente = float(coeficiente_str)  # Converte a string para um float
                resultado = coeficiente / (i+1)  # Divide o coeficiente pelo valor correspondente
                # Substitui o coeficiente original pelo resultado na parte da equação
                parte_resultado = parte.replace(coeficiente_str, str(resultado))
                resultados.append(parte_resultado)

        ESFORÇO_CORTANTE = " + ".join(resultados)
        self.log.append(ESFORÇO_CORTANTE)
        return ESFORÇO_CORTANTE, resultados

    def calcular_resultado(self, ESFORÇO_CORTANTE):
        # Substitua 'x' por 'b2' na equação
        b2 = float(input("Digite o input: "))
        nova = ESFORÇO_CORTANTE.replace('x', str(b2))
        resuEsforco = nova.rfind("**")
        nova = nova[:resuEsforco]
        self.log.append(nova)
        resultado = eval(nova)
        self.log.append(resultado)
        return resultado, nova

    def substituir_equacao(self, ESFORÇO_CORTANTE):
        # Símbolo para 'x'
        x = symbols('x')
        equacao = sympify(ESFORÇO_CORTANTE)
        b2 = self.sheet['B2'].value
        equa = equacao.subs(x, b2)
        self.log.append(equa)
        return equa

    def substituir_valor_b2(self, ESFORÇO_CORTANTE):
        # Lendo o valor da célula B2
        celula_b2 = self.sheet['B2']
        valor_b2 = celula_b2.value
        # Substitua 'x' na sua equação pelo valor em B2
        ESFORÇO_CORTANTE_B2 = ESFORÇO_CORTANTE.replace('x', str(valor_b2))
        y_value_b2 = eval(ESFORÇO_CORTANTE_B2)
        return y_value_b2, ESFORÇO_CORTANTE_B2, valor_b2

    def plotar_grafico_esforco_cortante(self, resultados, ESFORÇO_CORTANTE):
        # Criando o gráfico
        x = np.linspace(-10, 10, len(resultados))
        y = [eval(ESFORÇO_CORTANTE.replace('x', str(i))) for i in x]
        plt.figure(figsize=(10, 5))
        plt.plot(x, y)
        plt.title("Gráfico de Esforço Cortante")
        plt.xlabel("x")
        plt.ylabel("y")
        plt.show()

    def calcular_resultado_esforco_cortante(self, ESFORÇO_CORTANTE, valor_b2):
        # O resultado do esforço cortante
        resultado_esforco_cortante = eval(ESFORÇO_CORTANTE.replace('x', str(valor_b2)))
        # Resultado do esforço cortante ao final da equação
        ESFORÇO_CORTANTE += f" + {resultado_esforco_cortante}"
        return ESFORÇO_CORTANTE

    def calcular_momento_fletor(self, partes):
        resultados_momento_fletor = []
        for i, parte in enumerate(partes):
            coeficiente_str = re.search(r'[+-]?\s*\d+\.\d+', parte).group()  # Extrai o coeficiente de cada parte
            coeficiente_str = coeficiente_str.replace(" ", "")  # Remove os espaços em branco
            coeficiente = float(coeficiente_str)  # Converte a string para um float
            resultado = coeficiente / (len(partes)-i+1)  # Divide o coeficiente pelo valor correspondente
            # Substitui o coeficiente original pelo resultado na parte da equação
            parte_resultado = parte.replace(coeficiente_str, str(resultado))
            resultados_momento_fletor.append(parte_resultado)

        MOMENTO_FLETOR = " + ".join(resultados_momento_fletor)
        self.log.append(MOMENTO_FLETOR)
        return MOMENTO_FLETOR

    def executar(self):
        e = self.processar_equacao()
        self.plotar_grafico(e)
        ESFORÇO_CORTANTE, resultados = self.calcular_esforco_cortante(e)
        resultado, nova = self.calcular_resultado(ESFORÇO_CORTANTE)
        equa = self.substituir_equacao(ESFORÇO_CORTANTE)
        y_value_b2, ESFORÇO_CORTANTE_B2, valor_b2 = self.substituir_valor_b2(ESFORÇO_CORTANTE)
        self.plotar_grafico_esforco_cortante(resultados, ESFORÇO_CORTANTE)
        ESFORÇO_CORTANTE = self.calcular_resultado_esforco_cortante(ESFORÇO_CORTANTE, valor_b2)
        MOMENTO_FLETOR = self.calcular_momento_fletor(partes)
        self.log_to_file('log.txt')

calculadora = CalculadoraEsforcoCortante('/content/Dimensionamento de Longarina (Asa).xlsx')
calculadora.executar()